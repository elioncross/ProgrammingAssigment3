a <- available.packages()
head(rownames(a),3)
install.packages("slidify")
install.packages("ggplot2")
install.packages("devtools")
install.packages(c("foreign", "manipulate", "mgcv"))
install.packages("slidify")
library(ggplot2)
View(a)
search()
library(ggplot2)
search()
find.package("devtools")
install.packages("devtools")
library(devtools)
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
2+2
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$hp, mtcars$cyl, mean)
abs(82.63636-209.21429)
## Coursera Course Title: R Programming
## Coursera Course ID: rprog-011
## Programming Assignment 3: Hospital Quality
## Student: Ruben Leon
## Assigment Description:  Find the best hospital in a state
## The function called best takes two arguments: the 2-character abbreviated name of
## a state and an outcome name. The function reads the outcome-of-care-measures.csv file
## and returns a character vector with the name of the hospital that has the
## best (i.e. lowest) 30-day mortality for the specified outcome in that state.
best <- function(state, outcome) {
## Read outcome data
ocm <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Coerce the rate death columns to be numeric
ocm[, 11] <- suppressWarnings(as.numeric(ocm[, 11]))
ocm[,17] <- suppressWarnings(as.numeric(ocm[,17]))
ocm[,23] <- suppressWarnings(as.numeric(ocm[,23]))
## Check that state and outcome are valid
valid_states <- unique(ocm$State)
if (!state %in% valid_states) { stop('invalid state') }
valid_outcomes <- c('heart attack', 'heart failure', 'pneumonia')
if (!outcome %in% valid_outcomes) { stop('invalid outcome') }
## Return hospital name in that state with lowest 30-day death
## rate
## Rename rate death columns with valid outcome names
names(ocm)[11]<-"heart attack"
names(ocm)[17]<-"heart failure"
names(ocm)[23]<-"pneumonia"
## Subset data to match state and outcome values. Also exludes hospitals
## that do not have data on particular outcome
sset <- subset(ocm, State==state & !is.na(eval(parse( text=outcome ))), select = c(2,7,eval(parse( text=outcome ))))
## Rename outcome name column with a generic name
names(sset)[3]<-"outcome"
## Sort hospital names on alphabetical order
order_by_HospitalName_asc <- order(sset$Hospital.Name)
sset_ordered <- sset[order_by_HospitalName_asc,]
## Find minimum outcome value
## outcome_min <- min(sset_ordered$outcome)
## Return a character vector with the hospital with best mortality
## return (sset_ordered[sset_ordered$outcome==outcome_min,]$Hospital.Name[1])
}
best("TX","pneumonia")
setwd("C:/Users/Liz/Desktop/Data Science/ProgrammingAssignment3")
best("TX","pneumonia")
x<-best("TX","pneumonia")
x
x<-best("TX","heart attack")
ocm
ocm <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
sset <- subset(ocm, State==state & !is.na(11), select = c(2,7,11))
sset <- subset(ocm, State=="PR", select = c(2,7,11))
sset <- subset(ocm, State=="PR" & !is.na(11), select = c(2,7,11))
sset
sset <- subset(ocm, State=="PR" & !is.na(11), select = c(2,7,11))
sset
sset <- subset(ocm, State=="PR" & !is.na(ocm[11,]), select = c(2,7,11))
sset <- subset(ocm, State=="PR" & !is.na(ocm[11]), select = c(2,7,11))
sset
ocm
sset <- subset(ocm, State=="PR" & !is.na(pneumonia), select = c(2,7,pneumonia))
sset <- subset(ocm, State=="PR" & !is.na(pneumonia), select = c(2,7,11))
names(ocm)[23]<-"pneumonia"
sset <- subset(ocm, State=="PR" & !is.na(pneumonia), select = c(2,7,pneumonia))
sset
sset <- subset(ocm, State=="PR" & !is.na(ocm$pneumonia), select = c(2,7,pneumonia))
sset
sset <- subset(ocm, State=="PR" & !is.na('pneumonia'), select = c(2,7,pneumonia))
sset
sset <- subset(ocm, State=="PR" & !is.na(pneumonia), select = c(2,7,pneumonia))
sset
sset <- subset(ocm, State=="PR", select = c(2,7,pneumonia))
sset <- subset(ocm, State=="PR" & !is.na(pneumonia), select = c(2,7,pneumonia))
sset
sset <- subset(ocm, State=="PR" & is.na(pneumonia), select = c(2,7,pneumonia))
sset
sset <- subset(ocm, State=="PR" && !is.na(pneumonia), select = c(2,7,pneumonia))
sset
ocm
sset <- subset(ocm, State=="PR" && is.na(pneumonia), select = c(2,7,pneumonia))
sset
sset <- subset(ocm, State=="PR" && is.na(ocm$pneumonia), select = c(2,7,pneumonia))
sset
sset <- subset(ocm, State=="PR" & is.na(ocm$pneumonia), select = c(2,7,pneumonia))
sset
sset <- subset(ocm, State=="PR", select = c(2,7,pneumonia))
sset
sset <- subset(ocm, State=="PR", select = c(2,7,pneumonia))
sset
newdata <- na.omit(sset)
newdata
ocm[,23] <- suppressWarnings(as.numeric(ocm[,23]))
sset <- subset(ocm, State=="PR" & !is.na(pneumonia), select = c(2,7,pneumonia))
sset
sset <- subset(ocm, State=="PR" & !is.na(heart attack), select = c(2,7,heart attack))
ocm[, 11] <- suppressWarnings(as.numeric(ocm[, 11]))
ocm[,17] <- suppressWarnings(as.numeric(ocm[,17]))
ocm[,23] <- suppressWarnings(as.numeric(ocm[,23]))
sset <- subset(ocm, State=="PR" & !is.na('heart attack'), select = c(2,7,'heart attack'))
names(ocm)
names(ocm)[11]<-"heart attack"
names(ocm)[17]<-"heart failure"
names(ocm)[23]<-"pneumonia"
names(ocm)
sset <- subset(ocm, State=="PR" & !is.na(heart attack), select = c(2,7,heart attack))
sset <- subset(ocm, State=="PR" & !is.na("heart attack"), select = c(2,7,heart attack))
sset <- subset(ocm, State=="PR" & !is.na("heart attack"), select = c(2,7,"heart attack"))
sset <- subset(ocm, State=="PR" & !is.na(11), select = c(2,7,"heart attack"))
sset <- subset(ocm, State=="PR" & !is.na(11), select = c(2,7,11))
sset
sset <- subset(ocm, State=="PR" & !is.na(ocm[11]), select = c(2,7,"heart attack"))
sset <- subset(ocm, State=="PR" & !is.na(ocm[11]), select = c(2,7,11))
sset
sset <- subset(ocm, State=="PR" & !is.na(ocm[23]), select = c(2,7,23))
sset
## Coursera Course Title: R Programming
## Coursera Course ID: rprog-011
## Programming Assignment 3: Hospital Quality
## Student: Ruben Leon
## Assigment Description:  Find the best hospital in a state
## The function called best takes two arguments: the 2-character abbreviated name of
## a state and an outcome name. The function reads the outcome-of-care-measures.csv file
## and returns a character vector with the name of the hospital that has the
## best (i.e. lowest) 30-day mortality for the specified outcome in that state.
best <- function(state, outcome) {
## Read outcome data
ocm <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Coerce the rate death columns to be numeric
ocm[, 11] <- suppressWarnings(as.numeric(ocm[, 11]))
ocm[,17] <- suppressWarnings(as.numeric(ocm[,17]))
ocm[,23] <- suppressWarnings(as.numeric(ocm[,23]))
## Check that state and outcome are valid
valid_states <- unique(ocm$State)
if (!state %in% valid_states) { stop('invalid state') }
valid_outcomes <- c('heart attack', 'heart failure', 'pneumonia')
if (!outcome %in% valid_outcomes) { stop('invalid outcome') }
## Return hospital name in that state with lowest 30-day death
## rate
## Rename rate death columns with valid outcome names
## names(ocm)[11]<-"heart attack"
## names(ocm)[17]<-"heart failure"
## names(ocm)[23]<-"pneumonia"
## Subset data to match state and outcome values. Also exludes hospitals
## that do not have data on particular outcome
## sset <- subset(ocm, State==state, select = c(2,7,eval(parse( text=outcome ))))
sset <- NULL
if(outcome == "heart attack"){
sset <- subset(ocm, State==state & !is.na(ocm[11]), select = c(2,7,11))
}else if(outcome == "heart failure"){
sset <- subset(ocm, State==state & !is.na(ocm[17]), select = c(2,7,17))
}else if(outcome == "pneumonia"){
sset <- subset(ocm, State==state & !is.na(ocm[23]), select = c(2,7,23))
}
## Rename outcome name column with a generic name
names(sset)[3]<-"outcome"
## Sort hospital names on alphabetical order
order_by_HospitalName_asc <- order(sset$Hospital.Name)
sset_ordered <- sset[order_by_HospitalName_asc,]
## Find minimum outcome value
## outcome_min <- min(sset_ordered$outcome)
## Return a character vector with the hospital with best mortality
## return (sset_ordered[sset_ordered$outcome==outcome_min,]$Hospital.Name[1])
}
## Coursera Course Title: R Programming
## Coursera Course ID: rprog-011
## Programming Assignment 3: Hospital Quality
## Student: Ruben Leon
## Assigment Description:  Find the best hospital in a state
## The function called best takes two arguments: the 2-character abbreviated name of
## a state and an outcome name. The function reads the outcome-of-care-measures.csv file
## and returns a character vector with the name of the hospital that has the
## best (i.e. lowest) 30-day mortality for the specified outcome in that state.
best <- function(state, outcome) {
## Read outcome data
ocm <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Coerce the rate death columns to be numeric
ocm[, 11] <- suppressWarnings(as.numeric(ocm[, 11]))
ocm[,17] <- suppressWarnings(as.numeric(ocm[,17]))
ocm[,23] <- suppressWarnings(as.numeric(ocm[,23]))
## Check that state and outcome are valid
valid_states <- unique(ocm$State)
if (!state %in% valid_states) { stop('invalid state') }
valid_outcomes <- c('heart attack', 'heart failure', 'pneumonia')
if (!outcome %in% valid_outcomes) { stop('invalid outcome') }
## Return hospital name in that state with lowest 30-day death
## rate
## Rename rate death columns with valid outcome names
## names(ocm)[11]<-"heart attack"
## names(ocm)[17]<-"heart failure"
## names(ocm)[23]<-"pneumonia"
## Subset data to match state and outcome values. Also exludes hospitals
## that do not have data on particular outcome
## sset <- subset(ocm, State==state, select = c(2,7,eval(parse( text=outcome ))))
sset <- NULL
if(outcome == "heart attack"){
sset <- subset(ocm, State==state & !is.na(ocm[11]), select = c(2,7,11))
}else if(outcome == "heart failure"){
sset <- subset(ocm, State==state & !is.na(ocm[17]), select = c(2,7,17))
}else if(outcome == "pneumonia"){
sset <- subset(ocm, State==state & !is.na(ocm[23]), select = c(2,7,23))
}
## Rename outcome name column with a generic name
names(sset)[3]<-"outcome"
## Sort hospital names on alphabetical order
order_by_HospitalName_asc <- order(sset$Hospital.Name)
sset_ordered <- sset[order_by_HospitalName_asc,]
## Find minimum outcome value
outcome_min <- min(sset_ordered$outcome)
## Return a character vector with the hospital with best mortality
return (sset_ordered[sset_ordered$outcome==outcome_min,]$Hospital.Name[1])
}
source('C:/Users/Liz/Desktop/Data Science/ProgrammingAssignment3/best.R')
